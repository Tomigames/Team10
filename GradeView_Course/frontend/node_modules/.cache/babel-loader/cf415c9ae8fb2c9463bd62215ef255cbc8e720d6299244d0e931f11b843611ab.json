{"ast":null,"code":"/**\n * Utility functions for grade calculations\n */\n\n/**\n * Calculate the average grade for a section of assessments\n * @param {Array} assessments - Array of assessment objects with individualGrade property\n * @returns {number} - The average grade for the section\n */\nexport const calculateSectionAverage = assessments => {\n  if (!assessments || assessments.length === 0) return 0;\n  let total = 0;\n  let count = 0;\n  assessments.forEach(assessment => {\n    const grade = parseFloat(assessment.IndividualGrade);\n    if (!isNaN(grade)) {\n      total += grade;\n      count++;\n    }\n  });\n  return count > 0 ? total / count : 0;\n};\n\n/**\n * Calculate the overall course grade based on weighted section averages\n * @param {Object} courseData - Course data with weights and assessments\n * @returns {number} - The overall course grade\n */\nexport const calculateOverallGrade = courseData => {\n  if (!courseData || !courseData.weights || !courseData.assessments) return 0;\n  let totalWeightedGrade = 0;\n  let totalWeight = 0;\n\n  // Group assessments by weight type\n  const assessmentsByWeight = {};\n  courseData.assessments.forEach(assessment => {\n    if (!assessmentsByWeight[assessment.WeightID]) {\n      assessmentsByWeight[assessment.WeightID] = [];\n    }\n    assessmentsByWeight[assessment.WeightID].push(assessment);\n  });\n\n  // Calculate weighted average for each section\n  courseData.weights.forEach(weight => {\n    const sectionAssessments = assessmentsByWeight[weight.WeightID] || [];\n    const sectionAverage = calculateSectionAverage(sectionAssessments);\n    const weightPercentage = parseFloat(weight.WeightPercentage) || 0;\n    totalWeightedGrade += sectionAverage * (weightPercentage / 100);\n    totalWeight += weightPercentage;\n  });\n\n  // If total weight is 0, return 0 to avoid division by zero\n  const result = totalWeight > 0 ? totalWeightedGrade : 0;\n\n  // Ensure the result is a number\n  return isNaN(result) ? 0 : result;\n};\n\n/**\n * Get the color class for a grade\n * @param {number} grade - The grade value\n * @returns {string} - The color class name\n */\nexport const getGradeColor = grade => {\n  // Ensure grade is a number\n  const numericGrade = typeof grade === 'number' ? grade : 0;\n  if (numericGrade >= 85) return 'green';\n  if (numericGrade >= 70) return 'yellow';\n  if (numericGrade > 0) return 'red';\n  return 'gray';\n};","map":{"version":3,"names":["calculateSectionAverage","assessments","length","total","count","forEach","assessment","grade","parseFloat","IndividualGrade","isNaN","calculateOverallGrade","courseData","weights","totalWeightedGrade","totalWeight","assessmentsByWeight","WeightID","push","weight","sectionAssessments","sectionAverage","weightPercentage","WeightPercentage","result","getGradeColor","numericGrade"],"sources":["/Users/farahfathima/Documents/GitHub/Team10/GradeView_Course/frontend/src/utils/gradeCalculations.js"],"sourcesContent":["/**\n * Utility functions for grade calculations\n */\n\n/**\n * Calculate the average grade for a section of assessments\n * @param {Array} assessments - Array of assessment objects with individualGrade property\n * @returns {number} - The average grade for the section\n */\nexport const calculateSectionAverage = (assessments) => {\n  if (!assessments || assessments.length === 0) return 0;\n  \n  let total = 0;\n  let count = 0;\n  \n  assessments.forEach(assessment => {\n    const grade = parseFloat(assessment.IndividualGrade);\n    if (!isNaN(grade)) {\n      total += grade;\n      count++;\n    }\n  });\n  \n  return count > 0 ? total / count : 0;\n};\n\n/**\n * Calculate the overall course grade based on weighted section averages\n * @param {Object} courseData - Course data with weights and assessments\n * @returns {number} - The overall course grade\n */\nexport const calculateOverallGrade = (courseData) => {\n  if (!courseData || !courseData.weights || !courseData.assessments) return 0;\n  \n  let totalWeightedGrade = 0;\n  let totalWeight = 0;\n  \n  // Group assessments by weight type\n  const assessmentsByWeight = {};\n  courseData.assessments.forEach(assessment => {\n    if (!assessmentsByWeight[assessment.WeightID]) {\n      assessmentsByWeight[assessment.WeightID] = [];\n    }\n    assessmentsByWeight[assessment.WeightID].push(assessment);\n  });\n  \n  // Calculate weighted average for each section\n  courseData.weights.forEach(weight => {\n    const sectionAssessments = assessmentsByWeight[weight.WeightID] || [];\n    const sectionAverage = calculateSectionAverage(sectionAssessments);\n    const weightPercentage = parseFloat(weight.WeightPercentage) || 0;\n    \n    totalWeightedGrade += sectionAverage * (weightPercentage / 100);\n    totalWeight += weightPercentage;\n  });\n  \n  // If total weight is 0, return 0 to avoid division by zero\n  const result = totalWeight > 0 ? totalWeightedGrade : 0;\n  \n  // Ensure the result is a number\n  return isNaN(result) ? 0 : result;\n};\n\n/**\n * Get the color class for a grade\n * @param {number} grade - The grade value\n * @returns {string} - The color class name\n */\nexport const getGradeColor = (grade) => {\n  // Ensure grade is a number\n  const numericGrade = typeof grade === 'number' ? grade : 0;\n  \n  if (numericGrade >= 85) return 'green';\n  if (numericGrade >= 70) return 'yellow';\n  if (numericGrade > 0) return 'red';\n  return 'gray';\n}; "],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,uBAAuB,GAAIC,WAAW,IAAK;EACtD,IAAI,CAACA,WAAW,IAAIA,WAAW,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EAEtD,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,GAAG,CAAC;EAEbH,WAAW,CAACI,OAAO,CAACC,UAAU,IAAI;IAChC,MAAMC,KAAK,GAAGC,UAAU,CAACF,UAAU,CAACG,eAAe,CAAC;IACpD,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC,EAAE;MACjBJ,KAAK,IAAII,KAAK;MACdH,KAAK,EAAE;IACT;EACF,CAAC,CAAC;EAEF,OAAOA,KAAK,GAAG,CAAC,GAAGD,KAAK,GAAGC,KAAK,GAAG,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,qBAAqB,GAAIC,UAAU,IAAK;EACnD,IAAI,CAACA,UAAU,IAAI,CAACA,UAAU,CAACC,OAAO,IAAI,CAACD,UAAU,CAACX,WAAW,EAAE,OAAO,CAAC;EAE3E,IAAIa,kBAAkB,GAAG,CAAC;EAC1B,IAAIC,WAAW,GAAG,CAAC;;EAEnB;EACA,MAAMC,mBAAmB,GAAG,CAAC,CAAC;EAC9BJ,UAAU,CAACX,WAAW,CAACI,OAAO,CAACC,UAAU,IAAI;IAC3C,IAAI,CAACU,mBAAmB,CAACV,UAAU,CAACW,QAAQ,CAAC,EAAE;MAC7CD,mBAAmB,CAACV,UAAU,CAACW,QAAQ,CAAC,GAAG,EAAE;IAC/C;IACAD,mBAAmB,CAACV,UAAU,CAACW,QAAQ,CAAC,CAACC,IAAI,CAACZ,UAAU,CAAC;EAC3D,CAAC,CAAC;;EAEF;EACAM,UAAU,CAACC,OAAO,CAACR,OAAO,CAACc,MAAM,IAAI;IACnC,MAAMC,kBAAkB,GAAGJ,mBAAmB,CAACG,MAAM,CAACF,QAAQ,CAAC,IAAI,EAAE;IACrE,MAAMI,cAAc,GAAGrB,uBAAuB,CAACoB,kBAAkB,CAAC;IAClE,MAAME,gBAAgB,GAAGd,UAAU,CAACW,MAAM,CAACI,gBAAgB,CAAC,IAAI,CAAC;IAEjET,kBAAkB,IAAIO,cAAc,IAAIC,gBAAgB,GAAG,GAAG,CAAC;IAC/DP,WAAW,IAAIO,gBAAgB;EACjC,CAAC,CAAC;;EAEF;EACA,MAAME,MAAM,GAAGT,WAAW,GAAG,CAAC,GAAGD,kBAAkB,GAAG,CAAC;;EAEvD;EACA,OAAOJ,KAAK,CAACc,MAAM,CAAC,GAAG,CAAC,GAAGA,MAAM;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAIlB,KAAK,IAAK;EACtC;EACA,MAAMmB,YAAY,GAAG,OAAOnB,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,CAAC;EAE1D,IAAImB,YAAY,IAAI,EAAE,EAAE,OAAO,OAAO;EACtC,IAAIA,YAAY,IAAI,EAAE,EAAE,OAAO,QAAQ;EACvC,IAAIA,YAAY,GAAG,CAAC,EAAE,OAAO,KAAK;EAClC,OAAO,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}